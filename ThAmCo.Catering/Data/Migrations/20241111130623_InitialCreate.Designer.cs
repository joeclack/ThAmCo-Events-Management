// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ThAmCo.Catering.Data.Migrations
{
    [DbContext(typeof(CateringDbContext))]
    [Migration("20241111130623_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.10");

            modelBuilder.Entity("ThAmCo.Catering.Models.FoodBooking", b =>
                {
                    b.Property<int>("FoodBookingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("ClientReferenceId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("FoodBookingDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("MenuId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("NumberOfGuests")
                        .HasColumnType("INTEGER");

                    b.HasKey("FoodBookingId");

                    b.HasIndex("MenuId");

                    b.ToTable("FoodBookings");

                    b.HasData(
                        new
                        {
                            FoodBookingId = 1,
                            ClientReferenceId = 1,
                            FoodBookingDate = new DateTime(2024, 11, 11, 13, 6, 22, 821, DateTimeKind.Local).AddTicks(1568),
                            MenuId = 1,
                            NumberOfGuests = 1
                        },
                        new
                        {
                            FoodBookingId = 2,
                            ClientReferenceId = 2,
                            FoodBookingDate = new DateTime(2024, 11, 21, 13, 6, 22, 821, DateTimeKind.Local).AddTicks(1629),
                            MenuId = 2,
                            NumberOfGuests = 5
                        },
                        new
                        {
                            FoodBookingId = 3,
                            ClientReferenceId = 3,
                            FoodBookingDate = new DateTime(2024, 12, 11, 13, 6, 22, 821, DateTimeKind.Local).AddTicks(1634),
                            MenuId = 3,
                            NumberOfGuests = 2
                        });
                });

            modelBuilder.Entity("ThAmCo.Catering.Models.FoodItem", b =>
                {
                    b.Property<int>("FoodItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<float>("UnitPrice")
                        .HasColumnType("REAL");

                    b.HasKey("FoodItemId");

                    b.ToTable("FoodItems");

                    b.HasData(
                        new
                        {
                            FoodItemId = 1,
                            Description = "Grilled chicken breast with lettuce, tomato, and mayo on a toasted bun",
                            Name = "Classic Chicken Sandwich",
                            UnitPrice = 5.99f
                        },
                        new
                        {
                            FoodItemId = 2,
                            Description = "Whole-wheat wrap with hummus, fresh veggies, and a hint of vinaigrette",
                            Name = "Fresh Veggie Wrap",
                            UnitPrice = 4.49f
                        },
                        new
                        {
                            FoodItemId = 3,
                            Description = "Crisp romaine lettuce with Caesar dressing, croutons, and Parmesan cheese",
                            Name = "Caesar Salad",
                            UnitPrice = 3.99f
                        },
                        new
                        {
                            FoodItemId = 4,
                            Description = "Juicy grilled steak seasoned to perfection",
                            Name = "Grilled Steak",
                            UnitPrice = 12.99f
                        },
                        new
                        {
                            FoodItemId = 5,
                            Description = "Turkey, bacon, lettuce, and tomato stacked on toasted bread",
                            Name = "Turkey Club Sandwich",
                            UnitPrice = 6.49f
                        },
                        new
                        {
                            FoodItemId = 6,
                            Description = "Classic ham and cheese sandwich with fresh lettuce and tomato",
                            Name = "Ham and Cheese Sandwich",
                            UnitPrice = 5.19f
                        },
                        new
                        {
                            FoodItemId = 7,
                            Description = "Melted cheddar cheese between crispy, toasted bread",
                            Name = "Grilled Cheese Sandwich",
                            UnitPrice = 4.99f
                        },
                        new
                        {
                            FoodItemId = 8,
                            Description = "Bacon, lettuce, and tomato on toasted whole-grain bread",
                            Name = "BLT Sandwich",
                            UnitPrice = 5.79f
                        },
                        new
                        {
                            FoodItemId = 9,
                            Description = "Two tacos with grilled fish, slaw, and a spicy mayo drizzle",
                            Name = "Fish Tacos",
                            UnitPrice = 7.99f
                        },
                        new
                        {
                            FoodItemId = 10,
                            Description = "Classic Italian pasta with rich meat sauce",
                            Name = "Spaghetti Bolognese",
                            UnitPrice = 8.99f
                        },
                        new
                        {
                            FoodItemId = 11,
                            Description = "Penne pasta in a spicy tomato sauce with garlic and chili",
                            Name = "Penne Arrabbiata",
                            UnitPrice = 7.49f
                        },
                        new
                        {
                            FoodItemId = 12,
                            Description = "Creamy risotto with wild mushrooms and Parmesan",
                            Name = "Mushroom Risotto",
                            UnitPrice = 9.49f
                        },
                        new
                        {
                            FoodItemId = 13,
                            Description = "Fettuccine pasta with creamy Alfredo sauce and grilled chicken",
                            Name = "Chicken Alfredo",
                            UnitPrice = 10.99f
                        },
                        new
                        {
                            FoodItemId = 14,
                            Description = "Two burritos filled with beef, rice, beans, and cheese",
                            Name = "Beef Burritos",
                            UnitPrice = 6.99f
                        },
                        new
                        {
                            FoodItemId = 15,
                            Description = "Two tacos filled with seasoned veggies, beans, and avocado",
                            Name = "Vegetarian Tacos",
                            UnitPrice = 5.49f
                        },
                        new
                        {
                            FoodItemId = 16,
                            Description = "Pizza topped with BBQ chicken, red onions, and mozzarella",
                            Name = "BBQ Chicken Pizza",
                            UnitPrice = 12.99f
                        },
                        new
                        {
                            FoodItemId = 17,
                            Description = "Classic pepperoni pizza with marinara sauce and mozzarella",
                            Name = "Pepperoni Pizza",
                            UnitPrice = 11.49f
                        },
                        new
                        {
                            FoodItemId = 18,
                            Description = "Pizza with fresh tomatoes, mozzarella, and basil",
                            Name = "Margherita Pizza",
                            UnitPrice = 9.99f
                        },
                        new
                        {
                            FoodItemId = 19,
                            Description = "Beef burger with melted cheddar, lettuce, and tomato on a brioche bun",
                            Name = "Cheeseburger",
                            UnitPrice = 6.49f
                        },
                        new
                        {
                            FoodItemId = 20,
                            Description = "Grilled veggie patty with lettuce, tomato, and avocado on a whole-wheat bun",
                            Name = "Veggie Burger",
                            UnitPrice = 5.99f
                        });
                });

            modelBuilder.Entity("ThAmCo.Catering.Models.Menu", b =>
                {
                    b.Property<int>("MenuId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("MenuName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.HasKey("MenuId");

                    b.ToTable("Menus");

                    b.HasData(
                        new
                        {
                            MenuId = 1,
                            MenuName = "Basic Lunch"
                        },
                        new
                        {
                            MenuId = 2,
                            MenuName = "Vegetarian Feast"
                        },
                        new
                        {
                            MenuId = 3,
                            MenuName = "Deluxe Dinner"
                        });
                });

            modelBuilder.Entity("ThAmCo.Catering.Models.MenuFoodItem", b =>
                {
                    b.Property<int>("MenuId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("FoodItemId")
                        .HasColumnType("INTEGER");

                    b.HasKey("MenuId", "FoodItemId");

                    b.HasIndex("FoodItemId");

                    b.ToTable("MenuFoodItems");

                    b.HasData(
                        new
                        {
                            MenuId = 1,
                            FoodItemId = 1
                        },
                        new
                        {
                            MenuId = 1,
                            FoodItemId = 3
                        },
                        new
                        {
                            MenuId = 1,
                            FoodItemId = 5
                        },
                        new
                        {
                            MenuId = 1,
                            FoodItemId = 6
                        },
                        new
                        {
                            MenuId = 2,
                            FoodItemId = 2
                        },
                        new
                        {
                            MenuId = 2,
                            FoodItemId = 3
                        },
                        new
                        {
                            MenuId = 2,
                            FoodItemId = 7
                        },
                        new
                        {
                            MenuId = 2,
                            FoodItemId = 15
                        },
                        new
                        {
                            MenuId = 3,
                            FoodItemId = 4
                        },
                        new
                        {
                            MenuId = 3,
                            FoodItemId = 10
                        },
                        new
                        {
                            MenuId = 3,
                            FoodItemId = 14
                        },
                        new
                        {
                            MenuId = 3,
                            FoodItemId = 13
                        });
                });

            modelBuilder.Entity("ThAmCo.Catering.Models.FoodBooking", b =>
                {
                    b.HasOne("ThAmCo.Catering.Models.Menu", "Menu")
                        .WithMany("FoodBookings")
                        .HasForeignKey("MenuId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Menu");
                });

            modelBuilder.Entity("ThAmCo.Catering.Models.MenuFoodItem", b =>
                {
                    b.HasOne("ThAmCo.Catering.Models.FoodItem", "FoodItem")
                        .WithMany("MenuFoodItems")
                        .HasForeignKey("FoodItemId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ThAmCo.Catering.Models.Menu", "Menu")
                        .WithMany("MenuFoodItems")
                        .HasForeignKey("MenuId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("FoodItem");

                    b.Navigation("Menu");
                });

            modelBuilder.Entity("ThAmCo.Catering.Models.FoodItem", b =>
                {
                    b.Navigation("MenuFoodItems");
                });

            modelBuilder.Entity("ThAmCo.Catering.Models.Menu", b =>
                {
                    b.Navigation("FoodBookings");

                    b.Navigation("MenuFoodItems");
                });
#pragma warning restore 612, 618
        }
    }
}
